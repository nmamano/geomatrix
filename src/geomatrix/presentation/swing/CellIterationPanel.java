/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package geomatrix.presentation.swing;

import geomatrix.business.controllers.CellIteratorController;
import java.awt.Point;
import java.util.HashSet;
import java.util.Set;

/**
 *
 * @author Nil
 */
public class CellIterationPanel extends javax.swing.JFrame {

    private CellIteratorController iteratorController;
    private MapPanel mapPanel;
    private Set<Point> iteredCells;
    private static final int AUTOMATIC_ITERATION_MS_LAPSUS = 40;
    
    /**
     * Creates new form CellIterationPanel
     */
    public CellIterationPanel(CellIteratorController iteratorController, MapPanel mapPanel) {

        setCloseBehaviour();
        initComponents();
        this.iteratorController = iteratorController;
        this.mapPanel = mapPanel;
        reset();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        IterateCellsPanel = new javax.swing.JPanel();
        advanceButton = new javax.swing.JButton();
        automaticButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cell Iteration");

        IterateCellsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Cell Iteration"));

        advanceButton.setText("Advance");
        advanceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advanceButtonActionPerformed(evt);
            }
        });

        automaticButton.setText("Automatic");
        automaticButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                automaticButtonActionPerformed(evt);
            }
        });

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout IterateCellsPanelLayout = new javax.swing.GroupLayout(IterateCellsPanel);
        IterateCellsPanel.setLayout(IterateCellsPanelLayout);
        IterateCellsPanelLayout.setHorizontalGroup(
            IterateCellsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IterateCellsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(IterateCellsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(advanceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(automaticButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetButton))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        IterateCellsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {advanceButton, automaticButton, resetButton});

        IterateCellsPanelLayout.setVerticalGroup(
            IterateCellsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IterateCellsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(advanceButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(automaticButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resetButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(IterateCellsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(IterateCellsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void advanceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advanceButtonActionPerformed
        if (! finished()) {
            advance();
        }
        else {
            showFinishedMessage();
        }
    }//GEN-LAST:event_advanceButtonActionPerformed

    private void automaticButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_automaticButtonActionPerformed
        Thread thread = new Thread(new automaticIterator());
        thread.start();
    }//GEN-LAST:event_automaticButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        reset();
    }//GEN-LAST:event_resetButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel IterateCellsPanel;
    private javax.swing.JButton advanceButton;
    private javax.swing.JButton automaticButton;
    private javax.swing.JButton resetButton;
    // End of variables declaration//GEN-END:variables

    private void reset() {
        iteratorController.reset();
        iteredCells = new HashSet<Point>();
        repaintIteredCells();
    }

    private boolean finished() {
        return ! iteratorController.hasMore();
    }

    private void advance() {
        iteredCells.add(iteratorController.getNext());
        repaintIteredCells();
    }

    private void showFinishedMessage() {
        //We want the user to see this exception. It is a lazy shortcut to
        //creating a popup message myself
        throw new UnsupportedOperationException("There are no more cells in this area");
    }

    private void repaintIteredCells() {
        mapPanel.setIterationPoints(iteredCells);
        mapPanel.repaint();
    }

    private void closeIterationInterface() {
        reset();
        this.setVisible(false);
    }

    private void setCloseBehaviour() {
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                closeIterationInterface();
            }
        });
    }

    private void waitSomeTime() {
        try {
            Thread.sleep(AUTOMATIC_ITERATION_MS_LAPSUS);
        }
        catch (InterruptedException e) {
            
        }
    }
    
    private class automaticIterator implements Runnable {

        @Override
        public void run() {
            while (! finished()) {
                //this is not working... the iteration is not shown cell per cell, but
                //all at the same time at the end of the whole waiting time
                advance();
                waitSomeTime();
            }
        }
        
    }
}
